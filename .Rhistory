#Apply family of functions in R ----
# Execution time of Apply() fxn is faster then  For Loop.
# Example:
# Getting the row means, of every row, of two columns in the following 10000 row dataframe:
N <- 10
x1 <- runif(N)
x2 <- runif(N)
d <- as.data.frame(cbind(x1, x2))
head(d)
d
# Loop: create a vector to store the results in
rowMeanFor <- vector("double", N)
rowMeanFor
# Loop: create a vector to store the results in
rowMeanFor <- vector("int", N)
# Loop: create a vector to store the results in
rowMeanFor <- vector("integer", N)
rowMeanFor
# Loop: create a vector to store the results in
rowMeanFor <- vector("double", N)
for (i in seq_len(N)) {
rowMeanFor[[i]] <- mean(c(d[i, 1], d[i, 2]))
}
rowMeanFor
seq_len(10)
d
d[1,1]
mean(c(d[1,1],d[1,2]))
c(d[1,1],d[1,2])
# Apply:
rowMeanApply <- apply(d, 1, mean)
rowMeanApply
?apply
# Checking whether the two results, one from loop & another from apply() are equal.
all.equal(rowMeanFor, rowMeanApply)
# Apply:
rowMeanApply <- apply(d, 1,2, mean)
# Apply:
rowMeanApply <- apply(d, 2, mean)
rowMeanApply
# Apply:
rowMeanApply <- apply(d, 1, mean)
rowMeanApply
# Checking whether the two results, one from loop & another from apply() are equal.
all.equal(rowMeanFor, rowMeanApply)
N <- 1000
x1 <- runif(N)
x2 <- runif(N)
d <- as.data.frame(cbind(x1, x2))
head(d)
# Time to do this using the For loop:
system.time(
for (i in seq_len(N)) {
rowMeanFor[[i]] <- mean(c(d[i, 1], d[i, 2]))
})
# Time to do this using the apply function:
system.time( rowMeanApply <- apply(d, 1, mean))
# Apply() fxn:
# Example:Sum a matrice over all the columns
m1 <- matrix(C<-(1:10),nrow=5, ncol=6)
m1
a_m1 <- apply(m1, 2, sum)
a_m1
class(a_m1)
str(a_m1)
a_m2 <- apply(m1, 1, mean)
a_m2
class(a_m2)
str(a_m2)
# lapply() fxn:
# Example: Change the string value of matrix to lower case with tolower function.
movies <- c("SPYDERMAN","BATMAN","VERTIGO","CHINATOWN")
movies_lower <-lapply(movies, tolower)
str(movies_lower)
dt <- cars
lmn_cars <- lapply(dt, min)
smn_cars <- sapply(dt, min)
lmn_cars
smn_cars
dt
lmxcars <- lapply(dt, max)
smxcars <- sapply(dt, max)
lmxcars
smxcars
#Plot the total spend and the age of the customers.
library(ggplot2)
df <- data.frame(age = c(18, 21, 22, 24, 26, 26, 27, 30, 31, 35, 39, 40, 41, 42, 44, 46, 47, 48, 49, 54),
spend = c(10, 11, 22, 15, 12, 13, 14, 33, 39, 37, 44, 27, 29, 20, 28, 21, 30, 31, 23, 24)
)
df
ggplot(df, aes(x = age, y = spend)) +
geom_point()
#Partition Clustering ----
#Kmeans clustering on iris dataset
data("iris")
i1<-iris
i1
i1$Species=NULL
head(i1)
res <- kmeans(i1,3)
res
res$size
res$cluster
#To check the accuracy of clusters formed:
#Plot
par(mfcol = c(1, 2))
plot(iris[c("Petal.Length","Petal.Width")],col= res$cluster)
plot(iris[c("Petal.Length","Petal.Width")],col= iris$Species)
#table cmd:
iris$CL<-res$cluster
table(iris$Species,iris$CL)
#Hierarchical Clustering----
summary(iris)
#Method1=Complete
#Using hclust function on the dataset for hierarchical clustering
c1 = hclust(dist(iris[,3:4]),method = "complete")
plot(c1)
plot(c1, cex=0.3)
#cut the dendrogram tree with a horizontal line at a height where the line can traverse
#without intersecting the merging point. Hence, We can see the ideal no. of clusters is 2.
#But that will not divide the dataset correctly, hence, taking no. of clusters as 3.
#we can cut-off the tree at desired no. of clusters using cutree.
Cut1 = cutree(c1,3)
table(iris$Species, Cut1)
#Rectangular Clusters
rect.hclust(c1,k=3,border = 2:5)
#Method2=ward.D
c2 = hclust(dist(iris[,3:4]),method = "ward.D")
plot(c2, cex=0.3)
#We see that the ideal n. of clusters is 3 or 4.
#We cut the tree at the desired no. of clusters using cutree.
Cut2 = cutree(c2,3)
table(iris$Species,Cut2)
rect.hclust(c2,k=3,border = 2:5)
#Method3=Average
c3 = hclust(dist(iris[,3:4]),method = "average")
plot(c3, cex=0.3)
#We see that the ideal n. of clusters is 3 or 4.
#We cut the tree at the desired no. of clusters using cutree.
Cut3 = cutree(c3,3)
table(iris$Species,Cut3)
rect.hclust(c3,k=3,border = 2:5)
#Accuracy:
#Accuracy:
#Total Correctly classifed instances = 50+45+49
setwd("/home/zer0/Downloads/abhi/AbhiAnalytics-master")
source("~/Downloads/abhi/AbhiAnalytics-master/Clustering_Basics.R")
str(d)
